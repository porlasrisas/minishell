=======================================================
FLUJO TÉCNICO DE MINISHELL - ANÁLISIS LÍNEA POR LÍNEA
=======================================================

====================
1. FUNCIÓN MAIN
====================
Archivo: src/main.c
Función: int main(int argc, char **argv)

LÍNEAS 23-24: Inicialización de la estructura t_shell
- Declaración de la estructura shell que contendrá todo el estado del programa
- Inicialización del contador de comandos y estado de salida

LÍNEAS 28-31: Verificación de argumentos
- argc == 1: Modo interactivo (sin argumentos)
- Cualquier otro valor: Muestra mensaje de uso

LÍNEAS 34-39: Inicialización del entorno
- Llamada a ft_init_env() para cargar variables de entorno del sistema
- Debug: Imprime el número de variables cargadas
- Critical: Sin esta inicialización, execve falla porque necesita env

LÍNEAS 42-49: Inicialización de la estructura t_format
- shell.free.ptr apunta al array de comandos para liberación de memoria
- shell.free.depth = 1 indica un nivel de profundidad para liberación
- Esta estructura es crucial para el sistema de limpieza de memoria

LÍNEAS 51-54: Loop principal de readline
- while con readline() para entrada interactiva
- add_history() añade comando al historial de bash
- Condición de salida: readline retorna NULL (Ctrl+D)

LÍNEAS 59-62: Debug de ubicación actual
- Imprime directorio actual y anterior
- Útil para verificar cambios de directorio con cd

LÍNEAS 64-84: Tokenización
- ft_split_minishell(): Divide input en tokens
- Maneja espacios, pipes, redirections como separadores
- Cada token se almacena en shell.tokens[]
- Debug: Imprime cada token encontrado

LÍNEAS 86-87: Parsing de comandos
- ft_parse_pipeline(): Convierte tokens en estructura de comandos
- Retorna número de comandos encontrados

LÍNEAS 89-126: Debug de comandos parseados
- Loop que imprime información detallada de cada comando:
  * Argumentos individuales (args[])
  * Argumentos con flags agrupados (args_flagged[])
  * Estado de pipe_after
- Esencial para debugging del parser

LÍNEAS 128-140: Ejecución de comandos
- Decisión entre comando simple vs pipeline
- Comando simple: 1 comando sin pipe
- Pipeline: múltiples comandos conectados con pipes
- Cada tipo usa función de ejecución diferente

LÍNEAS 142-145: Limpieza
- errno = 0: Limpia errores de sistema previos
- ft_error(): Libera memoria usando estructura t_format
- Previene memory leaks al final de cada comando

====================
2. TOKENIZACIÓN
====================
Archivo: src/parse_tokens.c
Función: ft_parse_pipeline()

LÍNEAS 63-70: Inicialización del parser
- shell->command_count = 0
- shell->commands = NULL  
- i = 0 (índice de tokens)
- cmd = NULL (comando actual)

LÍNEAS 72-87: Loop principal de parsing
- while (tokens[i]): Procesa cada token
- Identificación de pipes: strcmp(tokens[i], "|") == 0
- Cuando encuentra pipe:
  * ft_args_with_flags(): Agrupa flags con comandos
  * cmd->pipe_after = 1: Marca que hay pipe después
  * cmd = NULL: Prepara para siguiente comando

LÍNEAS 89-95: Procesamiento de argumentos
- Si no es pipe, es argumento de comando
- ft_add_argument(): Añade argumento al comando actual
- Maneja primer argumento (nombre comando) y subsiguientes

LÍNEAS 97-103: Finalización del parser
- Procesa último comando (sin pipe después)
- ft_args_with_flags(): Agrupa flags del último comando
- cmd->pipe_after = 0: Último comando no tiene pipe

FUNCIÓN: ft_add_argument()
LÍNEAS 30-49: Adición dinámica de argumentos
- ft_realloc(): Expande array de argumentos dinámicamente
- new_size = (cmd->args_count + 2) * sizeof(char *)
- +2 porque necesita espacio para nuevo arg + NULL terminator
- ft_strdup(): Copia string del token (no referencia)
- cmd->args[count + 1] = NULL: Mantiene array NULL-terminated

====================
3. AGRUPACIÓN DE FLAGS
====================
Archivo: src/parse_args.c
Función: ft_args_with_flags()

LÍNEAS 55-62: Inicialización
- i = 0, count = 0: Contadores
- flagged = NULL: Array resultado
- entry = NULL: String temporal

LÍNEAS 63-77: Loop de procesamiento
- ft_is_flag(): Detecta argumentos que empiezan con '-'
- Si es flag: ft_join_flags() agrupa flags consecutivos
- Si no es flag: ft_strdup() copia argumento tal como está
- ft_realloc_flagged(): Expande array dinámicamente

FUNCIÓN: ft_join_flags()
LÍNEAS 24-37: Concatenación de flags
- Combina comando base con flags: "ls" + "-la" = "ls -la"
- ft_strjoin_free(): Libera memoria intermedia automáticamente
- Loop while: Continúa mientras find argumentos que sean flags
- Resultado: Un solo string con comando + todos sus flags

====================
4. EJECUCIÓN DE COMANDOS
====================
Archivo: src/pipes.c
Función: ft_execute_pipeline_execve()

LÍNEAS 17-26: Inicialización de pipeline
- child_pids: Array para almacenar PIDs de procesos hijo
- pipe_fd[2]: File descriptors para pipe actual
- prev_fd: FD de pipe anterior (para encadenar)

LÍNEAS 28-46: Loop de comandos
- Para cada comando en el pipeline:
- pipe(): Crea nuevo pipe si hay más comandos
- fork(): Crea proceso hijo para ejecutar comando

LÍNEAS 51-71: Configuración de pipes en proceso hijo
- prev_fd != -1: Redirige stdin desde pipe anterior
- cmd->pipe_after: Redirige stdout hacia próximo pipe
- dup2(): Duplica file descriptors
- close(): Cierra FDs no necesarios en proceso hijo

LÍNEAS 73-85: Verificación de builtin vs externo
- ft_is_builtin(): Verifica si comando es builtin
- Builtin: ft_execute_builtin() + exit(0)
- Externo: Continúa con execve

LÍNEAS 87-108: Resolución de path y execve
- ft_resolve_command_path(): Busca ejecutable en PATH
- execve(): Reemplaza proceso con comando externo
- perror() + exit(1): Manejo de error si execve falla

FUNCIÓN: ft_resolve_command_path()
LÍNEAS 158-195: Búsqueda en PATH
- ft_get_env(): Obtiene variable PATH del entorno
- ft_split(path_env, ':'): Divide PATH en directorios
- Loop: Prueba cada directorio concatenando "/comando"
- access(path, X_OK): Verifica si archivo existe y es ejecutable
- errno = 0: Limpia errores de access() para evitar mensajes espurios

====================
5. COMANDOS BUILTIN
====================
Archivo: src/builtings.c

FUNCIÓN: ft_is_builtin()
LÍNEAS 16-31: Detección de builtins
- Compara comando exacto con lista de builtins conocidos
- ft_strncmp() + verificación de terminación: Evita falsos positivos
- Ejemplo: "cd" coincide, pero "cdrom" no

FUNCIÓN: ft_execute_builtin()
LÍNEAS 33-50: Dispatcher de builtins
- Switch implícito usando ft_strncmp()
- Cada builtin llama a su función específica
- Placeholder para builtins no implementados

FUNCIÓN: ft_builtin_pwd()
LÍNEAS 53-62: Implementación de pwd
- getcwd(NULL, 0): Obtiene directorio actual, malloc automático
- Parámetros NULL, 0: Sistema aloca memoria necesaria
- printf(): Imprime directorio + newline
- free(): Libera memoria allocada por getcwd

FUNCIÓN: ft_builtin_echo()
LÍNEAS 65-87: Implementación de echo
- Detección de flag -n: Suprime newline final
- Loop de argumentos: Imprime cada argumento separado por espacios
- print_newline: Variable local (no macro conflictiva)
- Replica comportamiento de echo de bash

FUNCIÓN: ft_cd() (archivo src/cd.c)
LÍNEAS 51-83: Implementación de cd
- Sin argumentos: Cambia a $HOME
- Con argumento: chdir() al directorio especificado
- Actualización de shell->env.oldpwd y shell->env.pwd
- getcwd(NULL, 0): Obtiene nueva ruta después del cambio

====================
6. GESTIÓN DE MEMORIA
====================
Archivo: libft/ft_free.c

FUNCIÓN: ft_error()
LÍNEAS 69-95: Sistema unificado de liberación
- Parámetros variadicos: Acepta múltiples punteros a liberar
- t_format: Estructura que describe cómo liberar cada puntero
- type 0: Liberación simple (shallow)
- type 1: Liberación profunda (array de punteros)
- type 2: Liberación por profundidad (nested arrays)

LÍNEAS 76-77: Debug de errores del sistema
- errno check: Solo imprime errores si hay errno activo
- perror("zsh: "): Simula formato de error de shell real

CRITICAL ISSUE: errno cleanup
- access() en ft_resolve_command_path() establece errno
- ft_error() detecta errno y imprime mensajes espurios
- Solución: errno = 0 antes de llamadas a ft_error() de limpieza

====================
7. FLUJO DE EJECUCIÓN COMPLETO
====================

1. ENTRADA: Usuario tipea comando
2. TOKENIZACIÓN: Divide en tokens (espacios, pipes, redirecciones)
3. PARSING: Convierte tokens en estructura de comandos
4. AGRUPACIÓN: Combina comandos con sus flags
5. DECISIÓN: Comando simple vs pipeline
6. EJECUCIÓN: 
   - Simple: Verifica builtin → ejecuta en proceso actual
   - Pipeline: fork() múltiple + pipes + execve()
7. LIMPIEZA: Libera toda la memoria allocada
8. LOOP: Regresa a esperar siguiente comando

====================
8. PROBLEMAS CONOCIDOS Y SOLUCIONES
====================

PROBLEMA: "zsh: : No such file or directory"
CAUSA: access() en ft_resolve_command_path() establece errno
SOLUCIÓN: errno = 0 antes de ft_error() de limpieza

PROBLEMA: Variables declaradas después de código
CAUSA: Norma C99 de 42 requiere declaraciones al inicio
SOLUCIÓN: Mover todas las declaraciones al inicio de función

PROBLEMA: Conflicto de nombres con macros del sistema
CAUSA: 'newline' está definido en term.h
SOLUCIÓN: Renombrar variables locales (newline → print_newline)

PROBLEMA: Memory leaks en parsing
CAUSA: ft_realloc() sin verificación adecuada
SOLUCIÓN: Verificación de retorno + manejo de error

====================
9. ARQUITECTURA DE DATOS
====================

t_shell: Estructura principal que mantiene estado global
├── tokens: Array de strings (tokens parseados)
├── commands: Array de t_command (comandos estructurados)  
├── command_count: Número de comandos en pipeline
├── env: Estructura de entorno (variables, count)
├── free: Estructura para limpieza de memoria
└── exit_status: Código de salida del último comando

t_command: Estructura de comando individual
├── args: Array de argumentos originales
├── args_count: Número de argumentos
├── args_flagged: Argumentos con flags agrupados
├── pipe_after: Boolean, indica si hay pipe después
├── redirs: Array de redirecciones (futuro)
└── redir_count: Número de redirecciones

Esta arquitectura permite parsing modular, ejecución flexible y gestión de memoria determinística.
